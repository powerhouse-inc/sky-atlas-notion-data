---
description: 
globs: 
alwaysApply: true
---
# Sky Atlas Notion Data Project Guide

## Project Overview
This is a TypeScript/Node.js data pipeline that fetches Sky Atlas data from Notion, processes it through multiple stages, and exports it as structured JSON files for consumption by other projects (particularly the Atlas Explorer web app). The project is published as an npm package `@powerhousedao/sky-atlas-notion-data` and provides CLI tools for data processing.

## Core Architecture & Data Flow

### Data Transformation Pipeline
1. **Notion Data Fetching** → Raw Notion API data stored in `data/notion-pages/`
2. **Processing** → Structured format stored in `data/processed/`
3. **Parsing** → Unified data structure in `data/parsed/`
4. **Tree Generation** → Final ViewNode tree structure in `data/atlas-data.json`

### Key Technologies
- **Runtime**: Bun (preferred) with TypeScript
- **APIs**: Notion API (@notionhq/client), GitHub API (octokit)
- **Data Processing**: Zod for validation, notion-to-md for conversion
- **Output Formats**: JSON files, text representations, GitHub snapshots

## Project Structure

### Core Source Files
- [src/index.ts](mdc:src/index.ts) - Main exports for the npm package
- [src/constants.ts](mdc:src/constants.ts) - Page IDs, status mappings, and configuration
- [src/fetching.ts](mdc:src/fetching.ts) - Notion API data fetching logic
- [src/processors.ts](mdc:src/processors.ts) - Data transformation and processing
- [src/make-notion-data-by-id.ts](mdc:src/make-notion-data-by-id.ts) - Creates unified data structure
- [src/make-view-node-tree.ts](mdc:src/make-view-node-tree.ts) - Generates final tree structure

### Types & Schemas
- [src/types/](mdc:src/types) - TypeScript definitions for all data structures
- [src/types/view-nodes.ts](mdc:src/types/view-nodes.ts) - ViewNode tree structure types
- [src/types/notion-data.ts](mdc:src/types/notion-data.ts) - Notion API data types
- [src/types/processed-data.ts](mdc:src/types/processed-data.ts) - Processed data types

### CLI Scripts
- [scripts/make-atlas-data.ts](mdc:scripts/make-atlas-data.ts) - **Main script** for full data pipeline
- [scripts/fetch-latest-atlas-data.ts](mdc:scripts/fetch-latest-atlas-data.ts) - Fetches pre-processed data
- [scripts/diff-atlas-data.ts](mdc:scripts/diff-atlas-data.ts) - Compares atlas data versions
- [scripts/handleEnv.ts](mdc:scripts/handleEnv.ts) - Environment variable management

## Key Concepts & Methodologies

### Atlas Page Types
Based on [src/constants.ts](mdc:src/constants.ts), the system processes these Notion page types:
- **SCOPE** - Top-level Atlas nodes
- **ARTICLE** - Main content pages
- **SECTION** - Content sections within articles
- **ANNOTATION** - Supporting documentation
- **TENET** - Core principles
- **SCENARIO/SCENARIO_VARIATION** - Use cases and variations
- **AGENT** - Automated agents and their artifacts
- **ACTIVE_DATA** - Live data sources

### Status Management
Content goes through approval states:
- **Approved** - Published content
- **Provisional** - Draft content
- **Placeholder** - Structure placeholders
- **Deferred** - Postponed content
- **Archived** - Removed content

### Numbering System
The project implements a sophisticated hierarchical numbering system:
- Scopes use index-based numbering ([0], [1], [2])
- Regular nodes inherit parent numbering and append counters
- Categories flatten children into parent numbering
- Special prefixes for Agents ("AG") and Sky Primitives ("P")

## Development Workflows

### Primary Commands
```bash
# Full data pipeline (production)
bun run make-atlas-data

# Development mode (uses local cache, skips external APIs)
bun run make-atlas-data-dev

# Fetch pre-processed data
bun run fetch-latest-atlas-data

# Compare data versions
bun run diff-atlas-data
```

### Environment Variables
Required for different operations:
- `API_KEY` - Notion API key for data fetching
- `GITHUB_TOKEN` - For committing snapshots to sky-atlas-archive repo
- `IMPORT_API_KEY/IMPORT_API_URL` - For posting to import API
- `USE_LOCAL_DATA` - Use cached data instead of fetching
- `SKIP_IMPORT_API/SKIP_GITHUB_SNAPSHOT` - Skip external API calls

### Development Patterns
- Use `--useLocalData` flag to avoid repeated Notion API calls during development
- Scripts support both environment variables and CLI arguments
- All data is cached locally in `/data` directory for debugging
- Multiple output formats (JSON, text, diffs) for different use cases

## Output Files & Data Consumption

### Primary Outputs
- `data/atlas-data.json` - Main tree structure for Atlas Explorer
- `data/view-node-map.json` - Flattened node map for quick lookups
- `data/view-node-tree.json` - Legacy alias for atlas-data.json
- `data/simplified-atlas-tree.txt` - Human-readable tree representation

### Integration Points
- Published as npm package for other projects to consume
- GitHub snapshots in `powerhouse-inc/sky-atlas-archive` repository
- Import API integration for live data updates
- Used by Next.js Atlas Explorer for rendering

## Error Handling & Resilience
- Graceful fallback to local data when APIs are unavailable
- Validation using Zod schemas throughout the pipeline
- Comprehensive logging and error reporting
- Skip flags for optional operations (GitHub, Import API)

## Testing & Quality
- ESLint and Prettier for code quality
- TypeScript for type safety
- Bun for fast execution and testing
- Diff tools for comparing data changes over time
