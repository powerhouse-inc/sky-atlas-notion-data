---
description: 
globs: 
alwaysApply: true
---
# Data Processing Pipeline Flow

## Overview
The Sky Atlas data processing pipeline transforms raw Notion data into structured ViewNode trees through 4 distinct stages. Each stage has specific files, data formats, and purposes.

## Stage 1: Data Fetching
**Purpose**: Retrieve raw data from Notion API and external sources
**Primary File**: [src/fetching.ts](mdc:src/fetching.ts)
**Output Location**: `data/notion-pages/`
**Key Functions**:
- `fetchNotionPages()` - Main fetching orchestrator
- `fetchNotionPage()` - Individual page fetcher
- `fetchNotionBlocks()` - Block content fetcher

**When to Edit**:
- Adding new Notion API endpoints
- Modifying data fetching logic
- Adding new external data sources
- Changing caching behavior
- Rate limiting adjustments

**Related Files**:
- [src/constants.ts](mdc:src/constants.ts) - Page IDs and API configuration
- [scripts/handleEnv.ts](mdc:scripts/handleEnv.ts) - Environment setup

## Stage 2: Processing
**Purpose**: Transform raw Notion data into structured formats
**Primary File**: [src/processors.ts](mdc:src/processors.ts)
**Input**: `data/notion-pages/` (raw Notion data)
**Output Location**: `data/processed/`
**Key Functions**:
- `processNotionPages()` - Main processing orchestrator
- `processPage()` - Individual page processor
- `extractPageProperties()` - Property extraction
- `convertNotionToMarkdown()` - Content conversion

**When to Edit**:
- Adding new page property extractors
- Modifying content transformation logic
- Adding new page type processors
- Changing markdown conversion rules
- Adding data validation steps

**Related Files**:
- [src/page-properties/](mdc:src/page-properties) - Property extraction logic
- [src/types/processed-data.ts](mdc:src/types/processed-data.ts) - Processed data types

## Stage 3: Parsing (Data Unification)
**Purpose**: Create unified data structure with relationships and metadata
**Primary File**: [src/make-notion-data-by-id.ts](mdc:src/make-notion-data-by-id.ts)
**Input**: `data/processed/` (structured data)
**Output Location**: `data/parsed/`
**Key Functions**:
- `makeNotionDataById()` - Main parsing orchestrator
- `createPageMap()` - Build page relationship map
- `resolveReferences()` - Link related pages
- `validateDataIntegrity()` - Data consistency checks

**When to Edit**:
- Adding new relationship types
- Modifying data validation rules
- Adding new metadata extraction
- Changing page linking logic
- Adding data enrichment steps

**Related Files**:
- [src/types/notion-data.ts](mdc:src/types/notion-data.ts) - Notion data types
- [src/utils/](mdc:src/utils) - Utility functions for data manipulation

## Stage 4: Tree Generation
**Purpose**: Generate final ViewNode tree structure for consumption
**Primary File**: [src/make-view-node-tree.ts](mdc:src/make-view-node-tree.ts)
**Input**: `data/parsed/` (unified data)
**Output Location**: `data/atlas-data.json`, `data/view-node-map.json`
**Key Functions**:
- `makeViewNodeTree()` - Main tree builder
- `createViewNode()` - Individual node creator
- `buildHierarchy()` - Tree structure builder
- `assignNumbering()` - Hierarchical numbering system
- `generateNodeMap()` - Flattened node lookup map

**When to Edit**:
- Modifying tree structure logic
- Adding new ViewNode properties
- Changing numbering system
- Adding tree validation
- Modifying node filtering/sorting

**Related Files**:
- [src/types/view-nodes.ts](mdc:src/types/view-nodes.ts) - ViewNode type definitions
- [src/components/](mdc:src/components) - ViewNode component builders

## Data Types Architecture

### Core Type Files
- [src/types/notion-data.ts](mdc:src/types/notion-data.ts) - Raw Notion API responses
- [src/types/processed-data.ts](mdc:src/types/processed-data.ts) - Processed/structured data
- [src/types/view-nodes.ts](mdc:src/types/view-nodes.ts) - Final ViewNode tree structure
- [src/types/page-schemas/](mdc:src/types/page-schemas) - Page-specific type schemas

### When to Add/Modify Types
- **New Page Type**: Add schema in `page-schemas/`, add processor in `processors.ts`
- **New Property**: Add to relevant type file, update extractors in `page-properties/`
- **New ViewNode Field**: Update `view-nodes.ts`, modify tree generation logic
- **API Changes**: Update `notion-data.ts`, cascade changes through pipeline

## Pipeline Orchestration

### Main Scripts
- [scripts/make-atlas-data.ts](mdc:scripts/make-atlas-data.ts) - Full pipeline orchestrator
- [src/index.ts](mdc:src/index.ts) - Package exports for external consumption

### Development Workflow
1. **Data Fetch**: `bun run make-atlas-data --useLocalData` (skip API calls)
2. **Process Only**: Modify processors, re-run pipeline from Stage 2
3. **Tree Only**: Modify tree generation, re-run from Stage 4
4. **Type Changes**: Update types, validate through entire pipeline

## Quick Reference for Common Tasks

### Adding New Page Type
1. Add type definition to [src/types/page-schemas/](mdc:src/types/page-schemas)
2. Add processor function to [src/processors.ts](mdc:src/processors.ts)
3. Add property extractor to [src/page-properties/](mdc:src/page-properties)
4. Update ViewNode creation in [src/make-view-node-tree.ts](mdc:src/make-view-node-tree.ts)
5. Add page type constant to [src/constants.ts](mdc:src/constants.ts)

### Modifying Data Flow
1. **Fetching Changes**: Edit [src/fetching.ts](mdc:src/fetching.ts)
2. **Processing Changes**: Edit [src/processors.ts](mdc:src/processors.ts)
3. **Parsing Changes**: Edit [src/make-notion-data-by-id.ts](mdc:src/make-notion-data-by-id.ts)
4. **Tree Changes**: Edit [src/make-view-node-tree.ts](mdc:src/make-view-node-tree.ts)

### Debugging Pipeline Issues
- Check intermediate outputs in `data/` directory at each stage
- Use `--useLocalData` flag to isolate processing issues
- Validate types with Zod schemas in each stage
- Compare diffs using [scripts/diff-atlas-data.ts](mdc:scripts/diff-atlas-data.ts)
